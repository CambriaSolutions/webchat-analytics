rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUser() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }
    
    function isAdmin() {
    	 return getUser().keys().hasAll(['admin']) && getUser().admin == true;
    }
    
    // function hasAccessToProject(project) {
    //   return (project in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.projects);
    // }

    function hasAccessToSubjectMatter(subjectMatter) {
      return (subjectMatter in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subjectMatter);
    }

    // match /projects/{project}/{document=**} {
    //   allow read, create, update: if isSignedIn() && (isAdmin() || hasAccessToProject(project));
    //   allow delete: if isSignedIn() && isAdmin();
    // }

    match /subjectMatters/{subjectMatter}/{document=**} {
      allow read, create, update: if isSignedIn() && (isAdmin() || hasAccessToSubjectMatter(subjectMatter));
      allow delete: if isSignedIn() && isAdmin();
    }
    
    match /settings/{project} {
    	allow read: if isSignedIn();
      allow create, update: if isSignedIn() && (isAdmin() || hasAccessToProject(project));
      allow delete: if isSignedIn() && isAdmin();
    }
    
    match /users/{user} {
      allow read, create, update: if isSignedIn() && (isAdmin() || user == request.auth.uid);
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}